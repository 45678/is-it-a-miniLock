{
  "name": "miniLockLib",
  "description": "Do miniLock encryption operations on a web page of your own.",
  "version": "0.0.0",
  "author": {
    "name": "45678",
    "email": "undefined@undefined"
  },
  "license": "Public Domain",
  "main": "library.compiled/index.js",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/45678/miniLockLib.git"
  },
  "dependencies": {
    "blake2s-js": "1.0.3",
    "nacl-stream": "0.3.3",
    "tweetnacl": "0.12.x",
    "zxcvbn": "1.0.x"
  },
  "devDependencies": {
    "browserify": "5.9.x",
    "coffee-script": "1.8.x",
    "tape": "2.14.x",
    "wr": "1.3.x"
  },
  "scripts": {
    "annotate": "docco --output website/annotated_code --template website/annotated_code.html.jst --css website/stylesheet.css */*.coffee",
    "start": "make; npm run annotate; wr 'make; npm run annotate;' */*.coffee website/*.jst",
    "tests": "make; open http://minilocklib.dev/tests.html",
    "test": "npm run tests;"
  },
  "readme": "`miniLockLib` is a little [miniLock](http://minilock.io/) library for [ECMAScript](http://www.ecmascript.org/).\n\nGet [`miniLockLib.js`](https://raw.githubusercontent.com/45678/miniLockLib/master/miniLockLib.js) and add it to your web page with a script tag:\n\n    <script src=\"miniLockLib.js\" charset=\"utf-8\"></script>\n\nOr `npm install 45678/miniLockLib.git` and require it in your computer program with:\n\n    miniLockLib = require('miniLockLib')\n\nNow you are ready to call `miniLockLib` methods...\n\n__Examples__\n\nCall `miniLockLib.makeKeyPair` with a `secretPhrase` and `emailAddress` to get a pair of `keys`:\n\n    miniLockLib.makeKeyPair(secretPhrase, emailAddress, function(error, keys){\n      if (keys) {\n        keys.publicKey is a Uint8Array\n        keys.secretKey is a Uint8Array\n        error is undefined\n      } else {\n        error is a String explaining the failure\n        keys is undefined\n       }\n    })\n\nPass `data`, `name`, `keys` and `miniLockIDs` when you `encrypt` a file:\n\n    miniLockLib.encrypt({\n      data: blob,\n      name: 'sensitive_document.txt'\n      keys: {publicKey: Uint8Array, secretKey: Uint8Array},\n      miniLockIDs: [aliceID, bobbyID, ...]\n      callback: function(error, encrypted) {\n        encrypted.data is a Blob of the encrypted data\n        encrypted.data.size is the Number of bytes in the encrypted file\n        encrypted.data.type is 'application/minilock'\n        encrypted.name is 'sensitive document.txt.minilock'\n        encrypted.senderID is the miniLock ID of the person who encrypted the file\n      }\n    })\n\nPass `data` and `keys` when you `decrypt` a file:\n\n    miniLockLib.decrypt({\n      data: blob,\n      keys: {publicKey: Uint8Array, secretKey: Uint8Array},\n      callback: function(error, decrypted) {\n        decrypted.data is a Blob of the decrypted data\n        decrypted.data.size is the Number of bytes in the decrypted file\n        decrypted.name is the decrypted name of file as a String\n        decrypted.senderID is the miniLock ID of the person who encrypted the file\n      }\n    })\n\n__Sources__\n\n`miniLockLib` is composed of code from several dandy little projects:\n\n`miniLockLib.Base58` is a copy of the [cryptocoinjs bs58 library](https://github.com/cryptocoinjs/bs58).\nIt has been modified to work in a web agent window instead of a node.js environment.\nAnd the filename of the script was changed to match the `Base58` address that it defines.\n`Base58` is used to encode and decode miniLock IDs.\n\n`miniLockLib.BLAKE2s` is a subclass of [Dmitry Chestnykh’s implementation of the BLAKE2s](https://github.com/dchest/blake2s-js) cryptographic hash function.\n`miniLockLib` subclasses the original constructor to expose a modestly more convenient interface for its purposes.\n\n`miniLockLib.NaCl` is the [tweetnacl-js](https://github.com/dchest/tweetnacl-js) crypto library written by Dmitry Chestnykh & Devi Mandiri.\nThis instance of `NaCl` is extended with Dmitry’s [streaming encryption library](https://github.com/dchest/nacl-stream-js).\n`miniLockLib` relies on `NaCl` for a host of cryptographic and encoding functions.\n\n`miniLockLib.scrypt` is a copy of `scrypt-async.js` from the [scrypt-async-js](https://github.com/dchest/scrypt-async-js) project which was also written by Mr. Chestnykh.\n`scrypt` derives a key pair from a secret and a salt with the curve25519 encryption scheme.\n\n`miniLockLib.zxcvbn` is Dropbox’s [zxcvbn password strength estimator](https://github.com/dropbox/zxcvbn).\n`miniLockLib` relies on this library to calculate the entropy present in secret phrases.\n\n\n__Digging In__\n\n`git clone https://github.com/45678/miniLockLib.git` to get the source code.\n\n`make` to compile [CoffeeScript](http://www.coffeescript.org/) files into [ECMAScript](http://www.ecmascript.org/) files in the `library.compiled`, `tests.compiled` and `website` folders.\n\n`make clean` to start over.\n\n`npm run tests` to open the test suite in a web agent `window`.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/45678/miniLockLib/issues"
  },
  "homepage": "https://github.com/45678/miniLockLib",
  "_id": "miniLockLib@0.0.0",
  "_shasum": "c9d3b679f6ee17982b1fbfe8ee44a57819b24020",
  "_resolved": "git+https://github.com/45678/miniLockLib.git#07421552a556a5d90cc1a64aaab631f0c3e3cba9",
  "_from": "git+https://github.com/45678/miniLockLib.git"
}
